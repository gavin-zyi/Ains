//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#if !EXCLUDE_CODEGEN
#pragma warning disable 162
#pragma warning disable 219
#pragma warning disable 414
#pragma warning disable 649
#pragma warning disable 693
#pragma warning disable 1591
#pragma warning disable 1998

namespace Ains
{
    using System;
    using System.Net;
    using System.Runtime.Serialization;
    using System.Runtime.Serialization.Formatters.Binary;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using Orleans.Serialization;
    using Ains;
    using Orleans;
    using Orleans.Runtime;
    using Orleans.Core;
    using System.Collections.ObjectModel;
    using System.Collections;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class ArenaFactory
    {
        

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IArena> instead.")]
                        public static IArena GetGrain(System.String primaryKey)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IArena), primaryKey));
                        }

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IArena> instead.")]
                        public static IArena GetGrain(System.String primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IArena), primaryKey, grainClassNamePrefix));
                        }

            public static IArena Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return ArenaReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [global::Orleans.CodeGeneration.GrainReferenceAttribute("Ains.IArena")]
        internal class ArenaReference : global::Orleans.Runtime.GrainReference, global::Orleans.Runtime.IAddressable, Ains.IArena
        {
            

            public static IArena Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return (IArena) global::Orleans.Runtime.GrainReference.CastInternal(typeof(IArena), (global::Orleans.Runtime.GrainReference gr) => { return new ArenaReference(gr);}, grainRef, -1366771405);
            }
            
            protected internal ArenaReference(global::Orleans.Runtime.GrainReference reference) : 
                    base(reference)
            {
            }
            
            protected internal ArenaReference(SerializationInfo info, StreamingContext context) : 
                    base(info, context)
            {
            }
            
            protected override int InterfaceId
            {
                get
                {
                    return -1366771405;
                }
            }
            
            public override string InterfaceName
            {
                get
                {
                    return "Ains.IArena";
                }
            }
            
            [global::Orleans.CodeGeneration.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                ArenaReference input = ((ArenaReference)(original));
                return ((ArenaReference)(global::Orleans.Runtime.GrainReference.CopyGrainReference(input)));
            }
            
            [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
            public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                ArenaReference input = ((ArenaReference)(original));
                global::Orleans.Runtime.GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return ArenaReference.Cast(((global::Orleans.Runtime.GrainReference)(global::Orleans.Runtime.GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public override bool IsCompatible(int interfaceId)
            {
                return ((interfaceId == this.InterfaceId) 
                            || (interfaceId == -1277021679));
            }
            
            protected override string GetMethodName(int interfaceId, int methodId)
            {
                return ArenaMethodInvoker.GetMethodName(interfaceId, methodId);
            }
            
            System.Threading.Tasks.Task Ains.IArena.Config(Ains.IPlayer @owner, int @size, int @numberOfPlayers)
            {

                return base.InvokeMethodAsync<object>(1962749323, new object[] {@owner is global::Orleans.Grain ? @owner.AsReference<Ains.IPlayer>() : @owner, @size, @numberOfPlayers} );
            }
            
            System.Threading.Tasks.Task<Ains.ArenaPhase> Ains.IArena.GetPhase()
            {

                return base.InvokeMethodAsync<Ains.ArenaPhase>(-252978076, null );
            }
            
            System.Threading.Tasks.Task<System.Collections.ObjectModel.ReadOnlyDictionary<Ains.Hex, Ains.Tile>> Ains.IArena.GetTerrain()
            {

                return base.InvokeMethodAsync<System.Collections.ObjectModel.ReadOnlyDictionary<Ains.Hex,Ains.Tile>>(1790115182, null );
            }
            
            System.Threading.Tasks.Task Ains.IArena.Join(Ains.IPlayer @player)
            {

                return base.InvokeMethodAsync<object>(1481291527, new object[] {@player is global::Orleans.Grain ? @player.AsReference<Ains.IPlayer>() : @player} );
            }
            
            System.Threading.Tasks.Task<Ains.ArenaInfo> Ains.IArena.GetInfo()
            {

                return base.InvokeMethodAsync<Ains.ArenaInfo>(-1168913303, null );
            }
            
            System.Threading.Tasks.Task<System.Collections.Generic.List<Ains.IPlayer>> Ains.IArena.GetPlayers()
            {

                return base.InvokeMethodAsync<System.Collections.Generic.List<Ains.IPlayer>>(-1936437766, null );
            }
            
            System.Threading.Tasks.Task<Ains.Hex> Ains.IArena.GetPlayerPosition(Ains.IPlayer @player)
            {

                return base.InvokeMethodAsync<Ains.Hex>(-1773780564, new object[] {@player is global::Orleans.Grain ? @player.AsReference<Ains.IPlayer>() : @player} );
            }
            
            System.Threading.Tasks.Task<bool> Ains.IArena.Ready(Ains.IPlayer @player)
            {

                return base.InvokeMethodAsync<System.Boolean>(-587195547, new object[] {@player is global::Orleans.Grain ? @player.AsReference<Ains.IPlayer>() : @player} );
            }
            
            System.Threading.Tasks.Task Ains.IArena.Move(Ains.IPlayer @player, Ains.Hex @offset)
            {

                return base.InvokeMethodAsync<object>(1080715340, new object[] {@player is global::Orleans.Grain ? @player.AsReference<Ains.IPlayer>() : @player, @offset} );
            }
            
            System.Threading.Tasks.Task Ains.IArena.Commit(Ains.IPlayer @player)
            {

                return base.InvokeMethodAsync<object>(-1798413701, new object[] {@player is global::Orleans.Grain ? @player.AsReference<Ains.IPlayer>() : @player} );
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.MethodInvokerAttribute("Ains.IArena", -1366771405)]
    internal class ArenaMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        
        int global::Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId
        {
            get
            {
                return -1366771405;
            }
        }
        
        global::System.Threading.Tasks.Task<object> global::Orleans.CodeGeneration.IGrainMethodInvoker.Invoke(global::Orleans.Runtime.IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {

            try
            {                    if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case -1366771405:  // IArena
                        switch (methodId)
                        {
                            case 1962749323: 
                                return ((IArena)grain).Config((IPlayer)arguments[0], (Int32)arguments[1], (Int32)arguments[2]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -252978076: 
                                return ((IArena)grain).GetPhase().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 1790115182: 
                                return ((IArena)grain).GetTerrain().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 1481291527: 
                                return ((IArena)grain).Join((IPlayer)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1168913303: 
                                return ((IArena)grain).GetInfo().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1936437766: 
                                return ((IArena)grain).GetPlayers().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1773780564: 
                                return ((IArena)grain).GetPlayerPosition((IPlayer)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -587195547: 
                                return ((IArena)grain).Ready((IPlayer)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 1080715340: 
                                return ((IArena)grain).Move((IPlayer)arguments[0], (Hex)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1798413701: 
                                return ((IArena)grain).Commit((IPlayer)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }case -1277021679:  // IGrainWithStringKey
                        switch (methodId)
                        {
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
            }
            catch(Exception ex)
            {
                var t = new System.Threading.Tasks.TaskCompletionSource<object>();
                t.SetException(ex);
                return t.Task;
            }
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case -1366771405:  // IArena
                    switch (methodId)
                    {
                        case 1962749323:
                            return "Config";
                    case -252978076:
                            return "GetPhase";
                    case 1790115182:
                            return "GetTerrain";
                    case 1481291527:
                            return "Join";
                    case -1168913303:
                            return "GetInfo";
                    case -1936437766:
                            return "GetPlayers";
                    case -1773780564:
                            return "GetPlayerPosition";
                    case -587195547:
                            return "Ready";
                    case 1080715340:
                            return "Move";
                    case -1798413701:
                            return "Commit";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }
                case -1277021679:  // IGrainWithStringKey
                    switch (methodId)
                    {
                        
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class HeroFactory
    {
        

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IHero> instead.")]
                        public static IHero GetGrain(System.Guid primaryKey)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IHero), primaryKey));
                        }

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IHero> instead.")]
                        public static IHero GetGrain(System.Guid primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IHero), primaryKey, grainClassNamePrefix));
                        }

            public static IHero Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return HeroReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [global::Orleans.CodeGeneration.GrainReferenceAttribute("Ains.IHero")]
        internal class HeroReference : global::Orleans.Runtime.GrainReference, global::Orleans.Runtime.IAddressable, Ains.IHero
        {
            

            public static IHero Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return (IHero) global::Orleans.Runtime.GrainReference.CastInternal(typeof(IHero), (global::Orleans.Runtime.GrainReference gr) => { return new HeroReference(gr);}, grainRef, 1019832973);
            }
            
            protected internal HeroReference(global::Orleans.Runtime.GrainReference reference) : 
                    base(reference)
            {
            }
            
            protected internal HeroReference(SerializationInfo info, StreamingContext context) : 
                    base(info, context)
            {
            }
            
            protected override int InterfaceId
            {
                get
                {
                    return 1019832973;
                }
            }
            
            public override string InterfaceName
            {
                get
                {
                    return "Ains.IHero";
                }
            }
            
            [global::Orleans.CodeGeneration.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                HeroReference input = ((HeroReference)(original));
                return ((HeroReference)(global::Orleans.Runtime.GrainReference.CopyGrainReference(input)));
            }
            
            [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
            public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                HeroReference input = ((HeroReference)(original));
                global::Orleans.Runtime.GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return HeroReference.Cast(((global::Orleans.Runtime.GrainReference)(global::Orleans.Runtime.GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public override bool IsCompatible(int interfaceId)
            {
                return ((interfaceId == this.InterfaceId) 
                            || (interfaceId == 1000532819));
            }
            
            protected override string GetMethodName(int interfaceId, int methodId)
            {
                return HeroMethodInvoker.GetMethodName(interfaceId, methodId);
            }
            
            System.Threading.Tasks.Task Ains.IHero.Step(Ains.IArena @arena)
            {

                return base.InvokeMethodAsync<object>(904094086, new object[] {@arena is global::Orleans.Grain ? @arena.AsReference<Ains.IArena>() : @arena} );
            }
            
            System.Threading.Tasks.Task<string> Ains.IPlayer.GetName()
            {

                return base.InvokeMethodAsync<System.String>(-1256896228, null );
            }
            
            System.Threading.Tasks.Task Ains.IPlayer.SetName(string @name)
            {

                return base.InvokeMethodAsync<object>(316304768, new object[] {@name} );
            }
            
            System.Threading.Tasks.Task<Ains.PlayerStat> Ains.IPlayer.GetStat()
            {

                return base.InvokeMethodAsync<Ains.PlayerStat>(-507549135, null );
            }
            
            System.Threading.Tasks.Task Ains.IPlayer.SetStat(Ains.PlayerStat @stat)
            {

                return base.InvokeMethodAsync<object>(-284309606, new object[] {@stat} );
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.MethodInvokerAttribute("Ains.IHero", 1019832973)]
    internal class HeroMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        
        int global::Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId
        {
            get
            {
                return 1019832973;
            }
        }
        
        global::System.Threading.Tasks.Task<object> global::Orleans.CodeGeneration.IGrainMethodInvoker.Invoke(global::Orleans.Runtime.IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {

            try
            {                    if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case 1019832973:  // IHero
                        switch (methodId)
                        {
                            case 904094086: 
                                return ((IHero)grain).Step((IArena)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1256896228: 
                                return ((IHero)grain).GetName().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 316304768: 
                                return ((IHero)grain).SetName((String)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -507549135: 
                                return ((IHero)grain).GetStat().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -284309606: 
                                return ((IHero)grain).SetStat((PlayerStat)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }case 1000532819:  // IPlayer
                        switch (methodId)
                        {
                            case -1256896228: 
                                return ((IPlayer)grain).GetName().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 316304768: 
                                return ((IPlayer)grain).SetName((String)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -507549135: 
                                return ((IPlayer)grain).GetStat().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -284309606: 
                                return ((IPlayer)grain).SetStat((PlayerStat)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
            }
            catch(Exception ex)
            {
                var t = new System.Threading.Tasks.TaskCompletionSource<object>();
                t.SetException(ex);
                return t.Task;
            }
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case 1019832973:  // IHero
                    switch (methodId)
                    {
                        case 904094086:
                            return "Step";
                    case -1256896228:
                            return "GetName";
                    case 316304768:
                            return "SetName";
                    case -507549135:
                            return "GetStat";
                    case -284309606:
                            return "SetStat";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }
                case 1000532819:  // IPlayer
                    switch (methodId)
                    {
                        case -1256896228:
                            return "GetName";
                    case 316304768:
                            return "SetName";
                    case -507549135:
                            return "GetStat";
                    case -284309606:
                            return "SetStat";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class PlayerFactory
    {
        

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IPlayer> instead.")]
                        public static IPlayer GetGrain(System.Guid primaryKey)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IPlayer), primaryKey));
                        }

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IPlayer> instead.")]
                        public static IPlayer GetGrain(System.Guid primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IPlayer), primaryKey, grainClassNamePrefix));
                        }

            public static IPlayer Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return PlayerReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [global::Orleans.CodeGeneration.GrainReferenceAttribute("Ains.IPlayer")]
        internal class PlayerReference : global::Orleans.Runtime.GrainReference, global::Orleans.Runtime.IAddressable, Ains.IPlayer
        {
            

            public static IPlayer Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return (IPlayer) global::Orleans.Runtime.GrainReference.CastInternal(typeof(IPlayer), (global::Orleans.Runtime.GrainReference gr) => { return new PlayerReference(gr);}, grainRef, 1000532819);
            }
            
            protected internal PlayerReference(global::Orleans.Runtime.GrainReference reference) : 
                    base(reference)
            {
            }
            
            protected internal PlayerReference(SerializationInfo info, StreamingContext context) : 
                    base(info, context)
            {
            }
            
            protected override int InterfaceId
            {
                get
                {
                    return 1000532819;
                }
            }
            
            public override string InterfaceName
            {
                get
                {
                    return "Ains.IPlayer";
                }
            }
            
            [global::Orleans.CodeGeneration.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                PlayerReference input = ((PlayerReference)(original));
                return ((PlayerReference)(global::Orleans.Runtime.GrainReference.CopyGrainReference(input)));
            }
            
            [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
            public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                PlayerReference input = ((PlayerReference)(original));
                global::Orleans.Runtime.GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return PlayerReference.Cast(((global::Orleans.Runtime.GrainReference)(global::Orleans.Runtime.GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public override bool IsCompatible(int interfaceId)
            {
                return (interfaceId == this.InterfaceId);
            }
            
            protected override string GetMethodName(int interfaceId, int methodId)
            {
                return PlayerMethodInvoker.GetMethodName(interfaceId, methodId);
            }
            
            System.Threading.Tasks.Task<string> Ains.IPlayer.GetName()
            {

                return base.InvokeMethodAsync<System.String>(-1256896228, null );
            }
            
            System.Threading.Tasks.Task Ains.IPlayer.SetName(string @name)
            {

                return base.InvokeMethodAsync<object>(316304768, new object[] {@name} );
            }
            
            System.Threading.Tasks.Task<Ains.PlayerStat> Ains.IPlayer.GetStat()
            {

                return base.InvokeMethodAsync<Ains.PlayerStat>(-507549135, null );
            }
            
            System.Threading.Tasks.Task Ains.IPlayer.SetStat(Ains.PlayerStat @stat)
            {

                return base.InvokeMethodAsync<object>(-284309606, new object[] {@stat} );
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.MethodInvokerAttribute("Ains.IPlayer", 1000532819)]
    internal class PlayerMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        
        int global::Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId
        {
            get
            {
                return 1000532819;
            }
        }
        
        global::System.Threading.Tasks.Task<object> global::Orleans.CodeGeneration.IGrainMethodInvoker.Invoke(global::Orleans.Runtime.IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {

            try
            {                    if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case 1000532819:  // IPlayer
                        switch (methodId)
                        {
                            case -1256896228: 
                                return ((IPlayer)grain).GetName().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 316304768: 
                                return ((IPlayer)grain).SetName((String)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -507549135: 
                                return ((IPlayer)grain).GetStat().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -284309606: 
                                return ((IPlayer)grain).SetStat((PlayerStat)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
            }
            catch(Exception ex)
            {
                var t = new System.Threading.Tasks.TaskCompletionSource<object>();
                t.SetException(ex);
                return t.Task;
            }
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case 1000532819:  // IPlayer
                    switch (methodId)
                    {
                        case -1256896228:
                            return "GetName";
                    case 316304768:
                            return "SetName";
                    case -507549135:
                            return "GetStat";
                    case -284309606:
                            return "SetStat";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
    
    [global::Orleans.CodeGeneration.RegisterSerializerAttribute()]
    internal class GridGenericMaster
    {
        
        public static void Register()
        {
            global::Orleans.Serialization.SerializationManager.Register(typeof(Ains.Grid<>), GridGenericMaster.GenericCopier, GridGenericMaster.GenericSerializer, GridGenericMaster.GenericDeserializer);
        }
        
        public static System.Type CreateConcreteType(System.Type[] typeParams)
        {
            return typeof(Ains_GridSerialization<>).MakeGenericType(typeParams);
        }
        
        public static object GenericCopier(object obj)
        {
            System.Type t = GridGenericMaster.CreateConcreteType(obj.GetType().GetGenericArguments());
            System.Reflection.MethodInfo f = t.GetMethod("DeepCopier");
            object[] args = new object[] {
                    obj};
            return f.Invoke(null, args);
        }
        
        public static void GenericSerializer(object input, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            System.Type t = GridGenericMaster.CreateConcreteType(input.GetType().GetGenericArguments());
            System.Reflection.MethodInfo f = t.GetMethod("Serializer");
            object[] args = new object[] {
                    input,
                    stream,
                    expected};
            f.Invoke(null, args);
        }
        
        public static object GenericDeserializer(System.Type expected, Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            System.Type t = GridGenericMaster.CreateConcreteType(expected.GetGenericArguments());
            System.Reflection.MethodInfo f = t.GetMethod("Deserializer");
            object[] args = new object[] {
                    expected,
                    stream};
            return f.Invoke(null, args);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    internal class Ains_GridSerialization<T>
    
    {
        
        private static System.Reflection.FieldInfo fieldInfo1;
        
        static Ains_GridSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            Ains.Grid<T> input = ((Ains.Grid<T>)(original));
            Ains.Grid<T> result = new Grid<T>();
            Orleans.Serialization.SerializationContext.Current.RecordObject(original, result);
            object objResult = ((object)(result));
            object temp1 = ((System.Collections.Generic.Dictionary<Ains.Hex,T>)(Orleans.Serialization.SerializationManager.DeepCopyInner(fieldInfo1.GetValue(input))));
            fieldInfo1.SetValue(objResult, temp1);
            return objResult;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Ains.Grid<T> input = ((Ains.Grid<T>)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(fieldInfo1.GetValue(input), stream, typeof(System.Collections.Generic.Dictionary<Ains.Hex,T>));
        }
        
        public static object Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Ains.Grid<T> result = new Grid<T>();
            object objResult = ((object)(result));
            object temp1 = ((System.Collections.Generic.Dictionary<Ains.Hex,T>)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(System.Collections.Generic.Dictionary<Ains.Hex,T>), stream)));
            fieldInfo1.SetValue(objResult, temp1);
            return objResult;
        }
        
        public static void Register()
        {
            global::Orleans.Serialization.SerializationManager.Register(typeof(Ains.Grid<T>), DeepCopier, Serializer, Deserializer);
            fieldInfo1 = typeof(Ains.Grid<T>).GetField("data", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.RegisterSerializerAttribute()]
    internal class Ains_HexSerialization
    {
        
        private static System.Reflection.FieldInfo fieldInfo1;
        
        private static System.Reflection.FieldInfo fieldInfo2;
        
        private static System.Reflection.FieldInfo fieldInfo3;
        
        static Ains_HexSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            return original;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Ains.Hex input = ((Ains.Hex)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Q, stream, typeof(int));
            Orleans.Serialization.SerializationManager.SerializeInner(input.R, stream, typeof(int));
            Orleans.Serialization.SerializationManager.SerializeInner(input.S, stream, typeof(int));
        }
        
        public static object Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Ains.Hex result = default(Ains.Hex);
            object objResult = ((object)(result));
            object temp1 = ((int)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(int), stream)));
            fieldInfo1.SetValue(objResult, temp1);
            object temp2 = ((int)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(int), stream)));
            fieldInfo2.SetValue(objResult, temp2);
            object temp3 = ((int)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(int), stream)));
            fieldInfo3.SetValue(objResult, temp3);
            return objResult;
        }
        
        public static void Register()
        {
            global::Orleans.Serialization.SerializationManager.Register(typeof(Ains.Hex), DeepCopier, Serializer, Deserializer);
            fieldInfo1 = typeof(Ains.Hex).GetField("Q", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
            fieldInfo2 = typeof(Ains.Hex).GetField("R", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
            fieldInfo3 = typeof(Ains.Hex).GetField("S", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.RegisterSerializerAttribute()]
    internal class Ains_TileSerialization
    {
        
        static Ains_TileSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            Ains.Tile input = ((Ains.Tile)(original));
            Ains.Tile result = new Ains.Tile();
            Orleans.Serialization.SerializationContext.Current.RecordObject(original, result);
            result.Id = input.Id;
            result.IsWalkable = input.IsWalkable;
            result.Name = input.Name;
            return result;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Ains.Tile input = ((Ains.Tile)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Id, stream, typeof(long));
            Orleans.Serialization.SerializationManager.SerializeInner(input.IsWalkable, stream, typeof(bool));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Name, stream, typeof(string));
        }
        
        public static object Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Ains.Tile result = new Ains.Tile();
            result.Id = ((long)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(long), stream)));
            result.IsWalkable = ((bool)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(bool), stream)));
            result.Name = ((string)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string), stream)));
            return result;
        }
        
        public static void Register()
        {
            global::Orleans.Serialization.SerializationManager.Register(typeof(Ains.Tile), DeepCopier, Serializer, Deserializer);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.RegisterSerializerAttribute()]
    internal class Ains_ArenaInfoSerialization
    {
        
        private static System.Reflection.FieldInfo fieldInfo1;
        
        private static System.Reflection.FieldInfo fieldInfo2;
        
        private static System.Reflection.FieldInfo fieldInfo3;
        
        static Ains_ArenaInfoSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            Ains.ArenaInfo input = ((Ains.ArenaInfo)(original));
            Ains.ArenaInfo result = default(Ains.ArenaInfo);
            Orleans.Serialization.SerializationContext.Current.RecordObject(original, result);
            object objResult = ((object)(result));
            object temp1 = ((Ains.IPlayer)(Orleans.Serialization.SerializationManager.DeepCopyInner(input.Player)));
            fieldInfo1.SetValue(objResult, temp1);
            object temp2 = input.Round;
            fieldInfo2.SetValue(objResult, temp2);
            object temp3 = input.Turn;
            fieldInfo3.SetValue(objResult, temp3);
            return objResult;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Ains.ArenaInfo input = ((Ains.ArenaInfo)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Player, stream, typeof(Ains.IPlayer));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Round, stream, typeof(int));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Turn, stream, typeof(int));
        }
        
        public static object Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Ains.ArenaInfo result = default(Ains.ArenaInfo);
            object objResult = ((object)(result));
            object temp1 = ((Ains.IPlayer)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(Ains.IPlayer), stream)));
            fieldInfo1.SetValue(objResult, temp1);
            object temp2 = ((int)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(int), stream)));
            fieldInfo2.SetValue(objResult, temp2);
            object temp3 = ((int)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(int), stream)));
            fieldInfo3.SetValue(objResult, temp3);
            return objResult;
        }
        
        public static void Register()
        {
            global::Orleans.Serialization.SerializationManager.Register(typeof(Ains.ArenaInfo), DeepCopier, Serializer, Deserializer);
            fieldInfo1 = typeof(Ains.ArenaInfo).GetField("Player", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
            fieldInfo2 = typeof(Ains.ArenaInfo).GetField("Round", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
            fieldInfo3 = typeof(Ains.ArenaInfo).GetField("Turn", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.RegisterSerializerAttribute()]
    internal class Ains_PlayerStatSerialization
    {
        
        static Ains_PlayerStatSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            return original;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Ains.PlayerStat input = ((Ains.PlayerStat)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Attack, stream, typeof(int));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Move, stream, typeof(int));
        }
        
        public static object Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Ains.PlayerStat result = default(Ains.PlayerStat);
            result.Attack = ((int)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(int), stream)));
            result.Move = ((int)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(int), stream)));
            return result;
        }
        
        public static void Register()
        {
            global::Orleans.Serialization.SerializationManager.Register(typeof(Ains.PlayerStat), DeepCopier, Serializer, Deserializer);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.RegisterSerializerAttribute()]
    internal class Ains_TerrainSerialization
    {
        
        private static System.Reflection.FieldInfo fieldInfo1;
        
        private static System.Reflection.FieldInfo fieldInfo2;
        
        static Ains_TerrainSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            Ains.Terrain input = ((Ains.Terrain)(original));
            Ains.Terrain result = ((Ains.Terrain)(System.Runtime.Serialization.FormatterServices.GetUninitializedObject(typeof(Ains.Terrain))));
            Orleans.Serialization.SerializationContext.Current.RecordObject(original, result);
            object objResult = ((object)(result));
            object temp1 = input.Size;
            fieldInfo1.SetValue(objResult, temp1);
            object temp2 = ((System.Collections.Generic.Dictionary<Ains.Hex,Ains.Tile>)(Orleans.Serialization.SerializationManager.DeepCopyInner(fieldInfo2.GetValue(input))));
            fieldInfo2.SetValue(objResult, temp2);
            return objResult;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Ains.Terrain input = ((Ains.Terrain)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Size, stream, typeof(int));
            Orleans.Serialization.SerializationManager.SerializeInner(fieldInfo2.GetValue(input), stream, typeof(System.Collections.Generic.Dictionary<Ains.Hex,Ains.Tile>));
        }
        
        public static object Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Ains.Terrain result = ((Ains.Terrain)(System.Runtime.Serialization.FormatterServices.GetUninitializedObject(typeof(Ains.Terrain))));
            object objResult = ((object)(result));
            object temp1 = ((int)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(int), stream)));
            fieldInfo1.SetValue(objResult, temp1);
            object temp2 = ((System.Collections.Generic.Dictionary<Ains.Hex,Ains.Tile>)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(System.Collections.Generic.Dictionary<Ains.Hex,Ains.Tile>), stream)));
            fieldInfo2.SetValue(objResult, temp2);
            return objResult;
        }
        
        public static void Register()
        {
            global::Orleans.Serialization.SerializationManager.Register(typeof(Ains.Terrain), DeepCopier, Serializer, Deserializer);
            fieldInfo1 = typeof(Ains.Terrain).GetField("<Size>k__BackingField", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
            fieldInfo2 = typeof(Grid<Tile>).GetField("data", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
        }
    }
}
#pragma warning restore 162
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 649
#pragma warning restore 693
#pragma warning restore 1591
#pragma warning restore 1998
#endif
